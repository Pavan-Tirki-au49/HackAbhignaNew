import os
import glob
from ultralytics import YOLO
import yaml

# --- Configuration ---
# You need to define the paths here. We are using the exact paths from your project structure.
MODEL_PATH = 'C:/Users/pavan/OneDrive/Desktop/circuscan_app/model/best.pt'
DATA_CONFIG_PATH = 'C:/Users/pavan/OneDrive/Desktop/circuscan_app/data.yaml'

# CRITICAL FIX: The base directory where your 'valid' folder (containing images/labels) is located.
# **YOU MUST REPLACE 'ACTUAL_RUN_FOLDER_NAME' WITH THE REAL FOLDER NAME**
# Example: 'C:/Users/pavan/OneDrive/Desktop/circuscan_app/runs/detect/exp'
VALID_DATA_BASE_DIR = 'C:/Users/pavan/OneDrive/Desktop/circuscan_app/runs/detect/ACTUAL_RUN_FOLDER_NAME'

def get_file_list(base_dir, subset='valid'):
    """
    Manually creates the file list strings (images=..., labels=...) required
    by the Ultralytics validator, bypassing the internal path logic.
    """
    # Look for files inside the images sub-folder of the specified subset directory
    images_pattern = os.path.join(base_dir, subset, 'images', '*.jpg')
    
    # Use glob to find all image files
    image_files = glob.glob(images_pattern)

    if not image_files:
        print(f"ERROR: No images found at the path: {os.path.join(base_dir, subset, 'images')}")
        print("Please check the 'VALID_DATA_BASE_DIR' in check_accuracy.py.")
        return None

    # Construct a string where each image path is on a new line (Ultralytics file list format)
    image_list_str = '\n'.join(image_files)
    
    # Create temporary files to hold the list of paths
    # Ultralytics accepts a text file containing the list of paths instead of a directory path.
    temp_list_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), f'{subset}_images.txt')
    with open(temp_list_path, 'w') as f:
        f.write(image_list_str)

    return temp_list_path


def check_model_accuracy(model_path, data_config_path):
    """Loads a model and validates it against the specified data."""
    print("--- ðŸ¤– CircuScan Model Accuracy Check ---")
    print(f"Loading model from: {model_path}")
    
    # 1. Load the model
    try:
        model = YOLO(model_path)
        print("Model loaded successfully. Starting validation...")
    except Exception as e:
        print(f"Error loading model: {e}")
        return

    # 2. Get the list of validation image paths
    # We are using the absolute path to the list file generated by get_file_list
    validation_file_list = get_file_list(VALID_DATA_BASE_DIR, subset='valid')
    
    if not validation_file_list:
        print("Validation failed due to missing images.")
        return

    # 3. Load the data config file
    with open(data_config_path, 'r') as f:
        data_config = yaml.safe_load(f)

    # CRITICAL: We override the 'val' key with the path to the text file list.
    # The 'names' and other configurations remain in 'data_config'.
    data_config['val'] = validation_file_list
    
    # Optional: If you want to delete the temporary file after validation, 
    # you can wrap the model.val call in a try/finally block.

    # 4. Start Validation
    try:
        metrics = model.val(data=data_config, split='val', batch=16, verbose=True)
        print("\n--- Validation Complete ---")
        print(f"Map50-95: {metrics.box.map}")
        print(f"Map50: {metrics.box.map50}")
    except Exception as e:
        print(f"Validation failed during runtime. Error: {e}")
        
# Execute the check
if __name__ == "__main__":
    # Ensure the correct path is being used for validation data.
    if not os.path.exists(os.path.join(VALID_DATA_BASE_DIR, 'valid', 'images')):
        print("\nFATAL ERROR: The script cannot find the validation images.")
        print(f"Please confirm this directory exists and contains images: {os.path.join(VALID_DATA_BASE_DIR, 'valid', 'images')}")
    else:
        check_model_accuracy(MODEL_PATH, DATA_CONFIG_PATH)
